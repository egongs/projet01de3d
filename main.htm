<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>LoadRunner par Nikola Ivanov et Justin Perron</title>
    <link rel="stylesheet" type="text/css" href="" />
    <!-- Code JavaScript local -->
    <script src="./niveau.js"></script>
    <script src="./platform.js"></script>
    <script src="./echelle.js"></script>
    <script src="./or.js"></script>
    <script src="./bedBlock.js"></script>
    <script src="./runner.js"></script>
    <script src="./rope.js"></script>
    <script type="text/javascript">
        var objCanvas = null;
        var objC2D = null;
        var objCycleAnimation = null;
        var lecture = null;
        var objPlatform = null;
        var image = null;
        var imagePlatForm = null;
        var imageEchelle = null;
        var imageOR = null;
        var imageBedBlock = null;
        var blockSizeX = 38.57;
        var blockSizeY = 35;
        var tabObjets = [];
        var binRunnerLeft = false;
        var binRunnerRight = false;
        var binPeutBouger = true;
        var timer = 0;
        var runner = null;
        var tabRunnerGauche = [1, 2, 3];
        var tabRunnerDroite = [1, 2, 3];

        var binPeutMonter = false;
        var binPeutDescendre = false;

        var posX = 7;
        var posY = 12;

        function initAnimation() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objC2D = objCanvas.getContext('2d');
            initImagePlatForm();
            initImageEchelle();
            initImageOr();
            initBedBlock();
            initTabObjets();
            dessiner(); // Dessiner une première fois
            animer();  // animer
        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();

        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {

            let intPosY = parseInt(posY);

            if (tabObjets[intPosY][parseInt(posX)] instanceof Or) {
                let ligne = niveau[intPosY]

                for (let i = 0; i < ligne.length; i++) {
                    if (ligne[i] == 'O') {
                        let ligneTemp = ligne;
                        ligne = ligne.substring(0, i) + 'R' + ligneTemp.substring(i + 'R'.length)
                    }
                    niveau[intPosY] = ligne;
                    tabObjets[intPosY][parseInt(posX)] = null;
                }
            }

            if (tabObjets[intPosY + 1][parseInt(posX)] == null) {
                binPeutBouger = false;
                posY += 0.06;
            } else {
                binPeutBouger = true;
            }

            binPeutMonter = (tabObjets[intPosY][parseInt(posX)] instanceof Echelle);
            binPeutDescendre = (tabObjets[intPosY + 1][parseInt(posX)] instanceof Echelle);

        }

        function mouvement(e) {
            let numCle = e.keyCode;
            if (binPeutBouger) {
                if (numCle === 37 && posX > 0) { // Gauche
                    posX -= 0.06;
                    binRunnerLeft = true;
                    binRunnerRight = false;
                    timer++
                } else if (numCle === 39 && posX < 27.5) { // Droite
                    posX += 0.06;
                    binRunnerLeft = false;
                    binRunnerRight = true;
                    timer++
                } else if (numCle === 38 && binPeutMonter) { // Haut
                    posY -= 1;
                } else if (numCle === 40 && binPeutDescendre) { // Bas
                    posY += 1;
                }
                else {
                    timer = 0
                }

            }
        }

        // Pour dessiner
        function dessiner() {
            objC2D.save()
            objC2D.fillRect(0, 0, objCanvas.width, objCanvas.height);
            dessinerNiveau()
            objC2D.translate(posX * blockSizeX, posY * blockSizeY + 5)
            runner = new Runner(posX * blockSizeX, posY * blockSizeY);
            if (binRunnerLeft) {
                if (timer % 5 == 0) {
                    runner.dessinerGaucheFull()
                }
                else if (timer % 5 == 1) {
                    runner.dessinerGaucheMid()
                }
                else if (timer % 5 == 2) {
                    runner.dessinerGauche()
                }
                else {
                    runner.dessinerGaucheMid()
                }
            }
            else if (binRunnerRight) {

                if (timer % 5 == 0) {
                    runner.dessinerDroiteFull()
                }
                else if (timer % 5 == 1) {
                    runner.dessinerDroiteMid()
                }
                else if (timer % 5 == 2) {
                    runner.dessinerDroite()
                }
                else {
                    runner.dessinerDroiteMid()
                }

            }
            else {
                runner.dessinerSpawn()
            }
            objC2D.restore()
        }

        function dessinerNiveau() {
            for (var i = 0; i < niveau.length; i++) {
                for (var j = 0; j < tabObjets[i].length; j++) {
                    if (tabObjets[i][j] != null) {
                        objC2D.save();
                        objC2D.translate(j * blockSizeX, i * blockSizeY);
                        tabObjets[i][j].dessiner();
                        objC2D.restore();
                    }
                }
            }

        }
        function initImagePlatForm() {
            imagePlatForm = new Image();
            imagePlatForm.src = "Capture.PNG"
        }
        function initImageEchelle() {
            imageEchelle = new Image();
            imageEchelle.src = "LADDER_SPRITE.PNG"
        }
        function initImageOr() {
            imageOr = new Image();
            imageOr.src = "or.PNG"
        }
        function initBedBlock() {
            imageBedBlock = new Image();
            imageBedBlock.src = "bedBlock.PNG"
        }
        function initTabObjets() {
            for (var i = 0; i < niveau.length; i++) {
                tabObjets[i] = [];
                for (var j = 0; j < niveau[i].length; j++) {
                    switch (niveau[i].charAt(j)) {
                        case "#":
                            {
                                tabObjets[i][j] = new Platform(imagePlatForm, blockSizeX, blockSizeY);
                            }
                            break;
                        case "E":
                            {
                                tabObjets[i][j] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
                            }
                            break;
                        case "O":
                            {
                                tabObjets[i][j] = new Or(imageOr, blockSizeX, blockSizeY, j, i);
                            }
                            break;
                        case "B":
                            {
                                tabObjets[i][j] = new BedBlock(imageBedBlock, blockSizeX, blockSizeY);
                            }
                            break;
                        case "G":
                            {
                                //create Winning echelle
                            }
                            break;
                        case "R":
                            {
                                tabObjets[i][j] = new Rope(blockSizeX, j, i);
                            }
                            break;
                        default:
                            {
                                tabObjets[i][j] = null;
                            }
                            break;

                    }
                }
            }
        }

    </script>
</head>

<body onload="initAnimation()" onkeydown="mouvement(event)">
    <canvas id="monCanvas" width="1080" height="640" tabIndex="1">
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>