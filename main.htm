<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" lang="fr" xml:lang="fr">

<head>

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <title>LoadRunner par Nikola Ivanov et Justin Perron</title>
    <link rel="stylesheet" type="text/css" href="" />
    <!-- Code JavaScript local -->
    <script src="./niveau.js"></script>
    <script src="./platform.js"></script>
    <script src="./echelle.js"></script>
    <script src="./or.js"></script>
    <script src="./bedBlock.js"></script>
    <script src="./runner.js"></script>
    <script src="./rope.js"></script>
    <script src="./chrono.js"></script>
    <script src="./mouvement.js"></script>
    <script src="./guarde.js"></script>
    <script type="text/javascript">
        var objCanvas = null;
        var objC2D = null;
        var objCycleAnimation = null;
        var lecture = null;
        var objPlatform = null;
        var image = null;
        var imagePlatForm = null;
        var imageEchelle = null;
        var imageOR = null;
        var imageBedBlock = null;
        var blockSizeX = 38.57;
        var blockSizeY = 35;
        var tabObjets = [];
        var tabObjets2 = [];
        var binRunnerLeft = false;
        var binRunnerRight = false;
        var binPeutBouger = true;
        var runner = null;
        var Guarde1 = null;
        var timer = 0;
        var timerGuarde1 = 0;
        var score = 0;
        var niv = 1;
        var vies = 5;
        var chrono = new Chrono();
        var temps = chrono.chrono();
        var intNbPiecesRamassees = 0;

        var binPeutMonter = false;
        var binPeutDescendre = false;
        var binDecend = false;

        var binCreuseTrouGauche = false;
        var binCreuseTrouDroite = false;
        var binPeutCreuserTrouGauche = false;
        var binPeutCreuserTrouDroite = false;

        var binGuarde1Gauche = false;
        var binGuarde1Droite = false;

        var binGuarde2Gauche = false;
        var binGuarde2Droite = false;

        var binGuarde3Gauche = false;
        var binGuarde3Droite = false;

        var binNiveauFini = false;

        var posX = 20;
        var posY = 12;
        //changes
        Guarde1 = new Guarde(14 * blockSizeX, 9 * blockSizeY, "blue")
        Guarde2 = new Guarde(16 * blockSizeX, 14 * blockSizeY, "red")
        Guarde3 = new Guarde(12 * blockSizeX, 14 * blockSizeY, "green")



        function initAnimation() {
            objCanvas = document.getElementById('monCanvas');
            objCanvas.focus();
            objC2D = objCanvas.getContext('2d');
            initImagePlatForm();
            initImageEchelle();
            initImageOr();
            initBedBlock();
            initTabObjets();
            dessiner(); // Dessiner une première fois
            animer();  // animer

        }

        // Un cycle d'animation	
        function animer() {
            // Requête pour le prochain cycle
            objCycleAnimation = requestAnimationFrame(animer);

            // Le cycle d'animation
            effacerDessin();
            mettreAjourAnimation();
            dessiner();

        }

        // Arrêter l'animation
        function arreterAnimation() {
            if (objCycleAnimation != null)
                cancelAnimationFrame(objCycleAnimation);
            objCycleAnimation = null;
        }

        // Pour effacer le dessin
        function effacerDessin() {
            objC2D.clearRect(0, 0, objCanvas.width, objCanvas.height);
        }

        // Pour mettre à jour l'animation
        function mettreAjourAnimation() {


            let intPosY = parseInt(posY);

            // Ramasser pièce d'or
            if (tabObjets[intPosY][parseInt(posX)] instanceof Or) {
                let ligne = niveau[intPosY]

                for (let i = 0; i < ligne.length; i++) {
                    if (ligne[i] == 'O') {
                        let ligneTemp = ligne;
                        ligne = ligne.substring(0, i) + 'R' + ligneTemp.substring(i + 'R'.length)
                    }
                    niveau[intPosY] = ligne;
                    tabObjets[intPosY][parseInt(posX)] = null;

                }
                intNbPiecesRamassees++;
                score += 250;
                document.getElementById("audioCoin").play();
                document.getElementById("audioCoin").volume = 0.1

                if (intNbPiecesRamassees == 6) {
                    niveauFini();
                }
            }

            if (binDecend == true && binPeutDescendre == true && tabObjets[intPosY][parseInt(posX)] instanceof Rope) {
                console.log(binDecend)
                binPeutBouger = false;
                posY += 0.06
                document.getElementById("audioFall").play();
                document.getElementById("audioFall").volume = 0.1
            }
            // Gravité
            if ((tabObjets[intPosY + 1][parseInt(posX)] == null || tabObjets[intPosY + 1][parseInt(posX)] instanceof Or || tabObjets[intPosY + 1][parseInt(posX)] instanceof Rope)
                && !(tabObjets[intPosY][parseInt(posX)] instanceof Rope)) {
                binPeutBouger = false;
                posY += 0.05;
                document.getElementById("audioFall").play();
                document.getElementById("audioFall").volume = 0.1
            } else {
                binPeutBouger = true;
                posY = parseInt(posY);
            }
            binPeutMonter = (tabObjets[intPosY][parseInt(posX)] instanceof Echelle) && intPosY > 0;
            binPeutDescendre = (tabObjets[intPosY + 1][parseInt(posX)] instanceof Echelle || tabObjets[intPosY][parseInt(posX)] instanceof Rope);

            if (intPosY == 0 && parseInt(posX) == 18) {
                niv++;
                score += 1500;
                posX = 14;
                posY = 14;

                tabObjets = tabObjets2;
            }

            bots()
        }

        function creuserTrou() {
            // Creuser trous
            let intPosY = parseInt(posY);
            let intTemps = 0;

            if (tabObjets[intPosY + 1][parseInt(posX) - 1] instanceof Platform
                && tabObjets[intPosY][parseInt(posX) - 1] == null) { // Peut creuser trou à gauche?
                binPeutCreuserTrouGauche = true;
            } else {
                binPeutCreuserTrouGauche = false;
            }
            if (tabObjets[intPosY + 1][parseInt(posX) + 1] instanceof Platform
                && tabObjets[intPosY][parseInt(posX) + 1] == null) { // Peut creuser trou à droite?
                binPeutCreuserTrouDroite = true;
            } else {
                binPeutCreuserTrouDroite = false;
            }

            if (binPeutCreuserTrouGauche && binCreuseTrouGauche) {
                let tempX = parseInt(posX) - 1;
                let tempY = intPosY + 1;

                tabObjets[tempY][tempX] = null;
                var timer = setInterval(function () {
                    intTemps++;
                    if (intTemps == 8) {
                        tabObjets[tempY][tempX] = new Platform(imagePlatForm, blockSizeX, blockSizeY);
                        clearInterval(timer);
                    }
                }, 1000);
                binCreuseTrouGauche = false;
            } else if (binPeutCreuserTrouDroite && binCreuseTrouDroite) {
                let tempX = parseInt(posX) + 1;
                let tempY = intPosY + 1;

                tabObjets[tempY][tempX] = null;
                var timer = setInterval(function () {
                    intTemps++;
                    if (intTemps == 8) {
                        tabObjets[tempY][tempX] = new Platform(imagePlatForm, blockSizeX, blockSizeY);
                        clearInterval(timer);
                    }
                }, 1000);
                binCreuseTrouDroite = false;
            }
        }

        function niveauFini() {
            tabObjets[0][18] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
            tabObjets[1][18] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
            tabObjets[2][18] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
            tabObjets[3][18] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
        }

        // Pour dessiner
        function dessiner() {
            objC2D.save()
            objC2D.fillRect(0, 0, objCanvas.width, objCanvas.height);
            dessinerNiveau();

            objC2D.beginPath();
            objC2D.strokeStyle = "yellow";
            objC2D.lineWidth = 75;
            objC2D.strokeRect(0, 0, objCanvas.width, objCanvas.height);
            objC2D.closePath();

            objC2D.beginPath()
            objC2D.fillStyle = "black";
            objC2D.font = "30px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("LoadRunner", objCanvas.width / 2, 30);
            objC2D.closePath()

            objC2D.beginPath()
            objC2D.fillStyle = "black";
            objC2D.font = "30px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("par Nikola Ivanov et Justin Perron", objCanvas.width / 2, objCanvas.height - 10);
            objC2D.closePath()

            objC2D.beginPath()
            objC2D.fillStyle = "orange";
            objC2D.font = "40px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("Score: " + score.toString().padStart(7, '0'), 210, objCanvas.height - 55);
            objC2D.closePath()

            if (typeof temps === "undefined") {
                temps = "00:00"
            }

            objC2D.beginPath()
            objC2D.fillStyle = "orange";
            objC2D.font = "40px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("Temps: " + temps, 525, objCanvas.height - 55);
            objC2D.closePath()

            objC2D.beginPath()
            objC2D.fillStyle = "orange";
            objC2D.font = "40px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("Niveau: " + niv, 800, objCanvas.height - 55);
            objC2D.closePath()

            objC2D.beginPath()
            objC2D.fillStyle = "orange";
            objC2D.font = "40px Arial";
            objC2D.textAlign = "center";
            objC2D.fillText("Vies: " + vies, 1000, objCanvas.height - 55);
            objC2D.closePath()

            objC2D.translate(posX * blockSizeX + 37.5, posY * blockSizeY + 5 + 37.5)
            runner = new Runner(posX * blockSizeX, posY * blockSizeY);

            if (binRunnerLeft) {
                if (timer % 5 == 0) {
                    runner.dessinerGaucheFull()
                }
                else if (timer % 5 == 1) {
                    runner.dessinerGaucheMid()

                }
                else if (timer % 5 == 2) {
                    runner.dessinerGauche()

                }
                else {
                    runner.dessinerGaucheMid()

                }
            }
            else if (binRunnerRight) {

                if (timer % 5 == 0) {
                    runner.dessinerDroiteFull()

                }
                else if (timer % 5 == 1) {
                    runner.dessinerDroiteMid()

                }
                else if (timer % 5 == 2) {
                    runner.dessinerDroite()

                }
                else {
                    runner.dessinerDroiteMid()

                }

            }
            else {
                runner.dessinerSpawn()
            }

            objC2D.restore()
            const d = new Date()
            objC2D.save()
            objC2D.translate(Guarde1.posX + 37.5, Guarde1.posY + 5 + 37.5)

            if (binGuarde1Gauche == true) {
                if (d.getSeconds() % 3 == 0) {
                    Guarde1.dessinerGaucheFull()
                }
                else if (d.getSeconds() % 3 == 1) {
                    Guarde1.dessinerGaucheMid()
                }
                else if (d.getSeconds() % 3 == 2) {
                    Guarde1.dessinerGauche()
                }
                else {
                    Guarde1.dessinerGaucheMid()
                }
            }
            else if (binGuarde1Droite == true) {

                if (d.getSeconds() % 3 == 0) {
                    Guarde1.dessinerDroiteFull()
                }
                else if (d.getSeconds() % 3 == 1) {
                    Guarde1.dessinerDroiteMid()
                }
                else if (d.getSeconds() % 3 == 2) {
                    Guarde1.dessinerDroite()
                }
                else {
                    Guarde1.dessinerDroiteMid()
                }

            }
            else {
                Guarde1.dessinerSpawn()
            }
            objC2D.restore()

            // objC2D.save()
            // objC2D.translate(Guarde2.posX + 37.5, Guarde2.posY + 5 + 37.5)
            // if (binGuarde2Gauche == true) {
            //     if (d.getSeconds() % 3 == 0) {
            //         Guarde2.dessinerGaucheFull()
            //     }
            //     else if (d.getSeconds() % 3 == 1) {
            //         Guarde2.dessinerGaucheMid()
            //     }
            //     else if (d.getSeconds() % 3 == 2) {
            //         Guarde2.dessinerGauche()
            //     }
            //     else {
            //         Guarde2.dessinerGaucheMid()
            //     }
            // }
            // else if (binGuarde2Droite == true) {

            //     if (d.getSeconds() % 3 == 0) {
            //         Guarde2.dessinerDroiteFull()
            //     }
            //     else if (d.getSeconds() % 3 == 1) {
            //         Guarde2.dessinerDroiteMid()
            //     }
            //     else if (d.getSeconds() % 3 == 2) {
            //         Guarde2.dessinerDroite()
            //     }
            //     else {
            //         Guarde2.dessinerDroiteMid()
            //     }


            // }
            // else {
            //     Guarde2.dessinerSpawn()
            // }
            // objC2D.restore()

            // objC2D.save()
            // objC2D.translate(Guarde3.posX + 37.5, Guarde3.posY + 5 + 37.5)
            // if (binGuarde3Gauche == true) {
            //     if (d.getSeconds() % 3 == 0) {
            //         Guarde3.dessinerGaucheFull()
            //     }
            //     else if (d.getSeconds() % 3 == 1) {
            //         Guarde3.dessinerGaucheMid()
            //     }
            //     else if (d.getSeconds() % 3 == 2) {
            //         Guarde3.dessinerGauche()
            //     }
            //     else {
            //         Guarde3.dessinerGaucheMid()
            //     }
            // }
            // else if (binGuarde3Droite == true) {

            //     if (d.getSeconds() % 3 == 0) {
            //         Guarde3.dessinerDroiteFull()
            //     }
            //     else if (d.getSeconds() % 3 == 1) {
            //         Guarde3.dessinerDroiteMid()
            //     }
            //     else if (d.getSeconds() % 3 == 2) {
            //         Guarde3.dessinerDroite()
            //     }
            //     else {
            //         Guarde3.dessinerDroiteMid()
            //     }

            // }
            // else {
            //     Guarde3.dessinerSpawn()
            // }
            // objC2D.restore()

        }

        function bots() {
            var tabEchelle = Array();
            var tabProche = Array();
            let posYGarde = parseInt(Guarde1.posY / blockSizeY);
            let intPosX = parseInt(posX);
            let intPosY = parseInt(posY);
            let echelle = Array();

            // for (let i = 0; i < tabObjets.length; i++) {
            //     for (let j = 0; j < tabObjets[i].length; j++) {
            //         if (tabObjets[i][j] instanceof Echelle) {
            //             echelle.push([j,i]);
            //         }
            //     }
            //     tabEchelle.push(echelle);
            // }
            for (var i = 0; i < tabEchelle.length; i++) {
                tabProche.push(tabEchelle[i] - Guarde1.posX)
            }
            let proche = null;
            let shortestDistance = Infinity;
            for (let ladder of tabEchelle) {
                const distance = Math.abs(ladder[0] - runner[0]) + Math.abs(ladder[1] - runner[1]);
                if (distance < shortestDistance) {
                    proche = ladder;
                    shortestDistance = distance;
                }
            }
            if (Guarde1.posY > parseInt(runner.posY)) {
                if (tabObjets[parseInt(Guarde1.posY / blockSizeY) + 1][parseInt(Guarde1.posX / blockSizeX)] == null) {
                    Guarde1.posY += 1
                }
                else if (tabObjets[parseInt(Guarde1.posY / blockSizeY)][parseInt(Guarde1.posX / blockSizeX)] instanceof Echelle) {
                    Guarde1.posY -= 1 * blockSizeY
                }
                else {
                    if (Guarde1.posX > proche) {
                        Guarde1.posX -= 1
                        binGuarde1Droite = false;
                        binGuarde1Gauche = true;
                    }
                    else if (Guarde1.posX < proche) {
                        Guarde1.posX += 1
                        binGuarde1Droite = true;
                        binGuarde1Gauche = false;
                    }
                }
            }
            else if (Guarde1.posY < parseInt(runner.posY)) {
                if (tabObjets[parseInt(Guarde1.posY / blockSizeY) + 1][parseInt(Guarde1.posX / blockSizeX)] == null) {
                    Guarde1.posY += 1
                }
                else if ((tabObjets[posYGarde][parseInt(Guarde1.posX / blockSizeX)] instanceof Echelle
                    || tabObjets[posYGarde + 1][parseInt(Guarde1.posX / blockSizeX)] instanceof Echelle)) {
                    Guarde1.posY += blockSizeY
                }
                else {
                    if (Guarde1.posX > proche) {
                        Guarde1.posX -= 1
                        binGuarde1Droite = false;
                        binGuarde1Gauche = true;
                    }
                    else if (Guarde1.posX < proche) {
                        Guarde1.posX += 1
                        binGuarde1Droite = true;
                        binGuarde1Gauche = false;
                    }
                }


            }
            else if (Guarde1.posY == parseInt(runner.posY)) {
                if (tabObjets[parseInt(Guarde1.posY / blockSizeY) + 1][parseInt(Guarde1.posX / blockSizeX)] == null
                    && !(tabObjets[parseInt(Guarde1.posY / blockSizeY)][parseInt(Guarde1.posX / blockSizeX)] instanceof Rope)) {
                    Guarde1.posY += 1
                }
                else if (Guarde1.posX < runner.posX - 1) {
                    Guarde1.posX += 1;
                    binGuarde1Droite = true;
                    binGuarde1Gauche = false;
                }
                else if (Guarde1.posX > runner.posX + 1) {
                    Guarde1.posX -= 1;
                    binGuarde1Droite = false;
                    binGuarde1Gauche = true;
                }
                else {
                    binGuarde1Droite = false;
                    binGuarde1Gauche = false;
                }
            }

        }

        function dessinerNiveau() {
            for (var i = 0; i < niveau.length; i++) {
                for (var j = 0; j < tabObjets[i].length; j++) {
                    if (tabObjets[i][j] != null) {
                        objC2D.save();
                        objC2D.translate(j * blockSizeX + 37.5, i * blockSizeY + 37.5);
                        tabObjets[i][j].dessiner();
                        objC2D.restore();
                    }
                }
            }
        }
        function initImagePlatForm() {
            imagePlatForm = new Image();
            imagePlatForm.src = "Capture.PNG"
        }
        function initImageEchelle() {
            imageEchelle = new Image();
            imageEchelle.src = "LADDER_SPRITE.PNG"
        }
        function initImageOr() {
            imageOr = new Image();
            imageOr.src = "or.PNG"
        }
        function initBedBlock() {
            imageBedBlock = new Image();
            imageBedBlock.src = "bedBlock.PNG"
        }
        function initTabObjets() {
            for (var i = 0; i < niveau.length; i++) {
                tabObjets[i] = [];
                tabObjets2[i] = [];
                for (var j = 0; j < niveau[i].length; j++) {
                    switch (niveau[i].charAt(j)) {
                        case "#":
                            {
                                tabObjets[i][j] = new Platform(imagePlatForm, blockSizeX, blockSizeY);
                                tabObjets2[i][j] = new Platform(imagePlatForm, blockSizeX, blockSizeY);
                            }
                            break;
                        case "E":
                            {
                                tabObjets[i][j] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
                                tabObjets2[i][j] = new Echelle(imageEchelle, blockSizeX, blockSizeY);
                            }
                            break;
                        case "O":
                            {
                                tabObjets[i][j] = new Or(imageOr, blockSizeX, blockSizeY, j, i);
                                tabObjets2[i][j] = new Or(imageOr, blockSizeX, blockSizeY, j, i);
                            }
                            break;
                        case "B":
                            {
                                tabObjets[i][j] = new BedBlock(imageBedBlock, blockSizeX, blockSizeY);
                                tabObjets2[i][j] = new BedBlock(imageBedBlock, blockSizeX, blockSizeY);
                            }
                            break;
                        case "P":
                            {
                                tabObjets[i][j] = new Rope(blockSizeX, j, i);
                                tabObjets2[i][j] = new Rope(blockSizeX, j, i);
                            }
                            break;
                        default:
                            {
                                tabObjets[i][j] = null;
                                tabObjets2[i][j] = null;
                            }
                            break;

                    }
                }
            }
        }

    </script>
</head>

<body onload="initAnimation()" onkeydown="mouvement(event)">
    <audio id="audioCoin">
        <source src="collect-ring-15982.mp3">
    </audio>
    <audio id="audioFall">
        <source src="mixkit-digital-cartoon-falling-405.wav">
    </audio>
    <canvas id="monCanvas" width="1155" height="745" tabIndex="1">
        Votre navigateur ne supporte pas la balise canvas
    </canvas>
</body>

</html>